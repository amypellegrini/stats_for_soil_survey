strsplit(names(comp_summary), ".")[[2]]
strsplit(names(comp_summary), ".")
names(comp_summary)
comp_summary <- reshape(comp_summary, v.names = "comp_acres", idvar = "compname", direction = "wide", timevar = "mlra_code")
strsplit(names(comp_summary), ".")
names(comp_summary)
strsplit(names(comp_summary), "\\.")
strsplit(names(comp_summary), "\\.")[[2]]
strsplit(names(comp_summary), "\\.")[2]
help(sub)
names(comp_summary) <- sub("comp_acres.", "", names(names(comp_summary)))
names(comp_summary)
comp_summary <- group_by(test, mlra_code, compname) %>% summarize(comp_acres = sum(comp_acres))
comp_summary <- data.frame(comp_summary, stringsAsFactors = FALSE)
comp_summary <- reshape(comp_summary, v.names = "comp_acres", idvar = "compname", direction = "wide", timevar = "mlra_code")
sub("comp_acres.", "", names(names(comp_summary))
)
sub("comp_acres.", "", names(comp_summary))
offices <- c("11-ATL", "11-WAV", "11-GAL")
series <- c("Ackmore", "Colo", "Nodaway", "Olmitz", "Vesser", "Zook", "Lawson", "Ely", "Bremer", "Wabash")
offices <- c("11-ATL", "11-WAV", "11-GAL")
mapunit <- read.csv("mapunit.csv")
legend <- read.csv("legend.csv")
component <- read.csv("component.csv")
ssa <- read.csv("M:/geodata/soils/SSA_Regional_Ownership_MASTER_MLRA_OFFICE.csv")
map2 <- subset(mapunit, select = c(musym, muname, muacres, mukey, lkey))
leg2 <- subset(legend, select = c(areasymbol, areaname, mlraoffice, lkey))
ssa2 <- subset(ssa, select = c(AREASYMBOL, Region, MLRA_CODE))
names(ssa2) <- tolower(names(ssa2))
idx <- ssa2$mlra_code %in% offices
ssa2 <- ssa2[idx, ]
View(ssa2)
comp2 <- subset(component, majcompflag == "Yes", select = c(compname, comppct_r, cokey, mukey))
idx <- comp2$compname %in% series
comp2 <- comp2[idx, ]
test <- join(map2, comp2, type = "right", by = "mukey")
test <- join(leg2, test, type = "right", by = "lkey")
test <- join(ssa2, test, type = "right", by = "areasymbol")
test$comp_acres <- with(test, (comppct_r / 100) * muacres)
comp_summary <- group_by(test, mlra_code, compname) %>% summarize(comp_acres = sum(comp_acres))
comp_summary <- data.frame(comp_summary, stringsAsFactors = FALSE)
comp_summary <- reshape(comp_summary, v.names = "comp_acres", idvar = "compname", direction = "wide", timevar = "mlra_code")
comp_summary <- group_by(test, mlra_code, compname) %>% summarize(comp_acres = sum(comp_acres))
comp_summary <- data.frame(comp_summary, stringsAsFactors = FALSE)
options(stringsAsFactors = FALSE)
mapunit <- read.csv("mapunit.csv")
legend <- read.csv("legend.csv")
component <- read.csv("component.csv")
ssa <- read.csv("M:/geodata/soils/SSA_Regional_Ownership_MASTER_MLRA_OFFICE.csv")
map2 <- subset(mapunit, select = c(musym, muname, muacres, mukey, lkey))
leg2 <- subset(legend, select = c(areasymbol, areaname, mlraoffice, lkey))
ssa2 <- subset(ssa, select = c(AREASYMBOL, Region, MLRA_CODE))
names(ssa2) <- tolower(names(ssa2))
idx <- ssa2$mlra_code %in% offices
ssa2 <- ssa2[idx, ]
comp2 <- subset(component, majcompflag == "Yes", select = c(compname, comppct_r, cokey, mukey))
idx <- comp2$compname %in% series
comp2 <- comp2[idx, ]
test <- join(map2, comp2, type = "right", by = "mukey")
test <- join(leg2, test, type = "right", by = "lkey")
test <- join(ssa2, test, type = "right", by = "areasymbol")
test$comp_acres <- with(test, (comppct_r / 100) * muacres)
comp_summary <- group_by(test, mlra_code, compname) %>% summarize(comp_acres = sum(comp_acres))
comp_summary <- data.frame(comp_summary, stringsAsFactors = FALSE)
comp_summary2 <- reshape(comp_summary, v.names = "comp_acres", idvar = "compname", direction = "wide", timevar = "mlra_code")
names(comp_summary2) <- sub("comp_acres.", "", names(comp_summary2))
View(comp_summary2)
write.csv(comp_summary2, file = "series_by_office.csv")
View(comp_summary)
test[test$mlra_code == NA]
test[test$mlra_code == NA, ]
test[is.na(test$mlra_code), ]
test2 <- test[is.na(test$mlra_code), ]
View(test2)
installed.packages()
components <- data.frame(compname = sort(unique(component$compname)))
View(components)
rm(list = ls())
library(soilDB)
fetchNASIS()
test <- fetchNASIS()
str()
str(test)
head(test)
str(test, max.level = 2)
test <- fetchNASIS()
str(test, max.level = 2)
cat(.libPaths(c("C:/R/win-library/3.2", "C:/Program Files/R/R-3.1.1/library")))
test <- cat(.libPaths(c("C:/R/win-library/3.2", "C:/Program Files/R/R-3.1.1/library")))
test
help(cat)
help(write.table)
x <- .libPaths(c("C:/R/win-library/3.2", "C:/Program Files/R/R-3.1.1/library"))
x
write(x, file = "test.Rprofile")
x <- '.libPaths(c("C:/R/win-library/3.2", "C:/Program Files/R/R-3.1.1/library"))'
write(x, file = "test.Rprofile")
write(x, file = ".Rprofile2")
dir.create(path="C:/workspace", recursive = T)
dir.create(path="C:/R/win-library/3.2", recursive = T)
x <- '.libPaths(c("C:/R/win-library/3.2", "C:/Program Files/R/R-3.1.1/library"))'
write(x, file = "C:workspace/.Rprofile")
write(x, file = "C:/workspace/.Rprofile")
.libPaths()
getOption("repos")
wd <- 'C:/workspace'
# define function for getting files and organizing locally
getData <- function(wd, files) {
# base data URL
base.url <- 'https://github.com/ncss-tech/stats_for_soil_survey/blob/master/data/'
# make data path using first file
wd.data <- paste0(wd, '/', strsplit(files[1], '/')[[1]][[1]])
# make a sub-folder for data files
if(!dir.exists(wd.data))
dir.create(wd.data)
# iterate over files and download
for(f in files) {
f.remote <- paste0(base.url, f)
f.local <- paste0(wd.data, '/', basename(f))
download.file(f.remote, f.local, quiet = TRUE)
}
getData(wd, c('clustering_and_ordination/ARTRV.csv'))
dir.create(path="C:/workspace", recursive = T)
dir.create(path="C:/R/win-library/3.3", recursive = T)
x <- '.libPaths(c("C:/R/win-library/3.3", "C:/Program Files/R/R-3.2.1/library"))'
write(x, file = "C:/workspace/.Rprofile")
install.packages()
help("install.packages")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg) > 0)
install.packages(new.pkg, lib = "C:/R/win-library/3.2", dependencies = TRUE)
}
## list of packages
packages <- c("aqp", "soilDB", "sharpshootR", "Rcmdr", "raster", "rms", "randomForest", "shape", "shapefiles", "sp", "spatial", "plyr", "lattice", "circular", "markdown", "httr", "rpart", "ggplot2", "rgdal", "knitr", "reshape2", "fBasics", "caret", "dplyr", "printr", "cluster", "ape", "RColorBrewer", "latticeExtra", "plotrix")
## install
ipak(packages)
local({
r <- getOption("repos")
r["CRAN"] <- "http://cran.mirrors.hoobly.com/"
options(repos = r)
})
ipak(packages)
ipak(packages[1])
ipak(packages[8])
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages(lib.loc = "C:/R/win-library/3.2")[, "Package"])]
if (length(new.pkg) > 0)
install.packages(new.pkg, lib = "C:/R/win-library/3.2", dependencies = TRUE)
}
## list of packages
packages <- c("aqp", "soilDB", "sharpshootR", "Rcmdr", "raster", "rms", "randomForest", "shape", "shapefiles", "sp", "spatial", "plyr", "lattice", "circular", "markdown", "httr", "rpart", "ggplot2", "rgdal", "knitr", "reshape2", "fBasics", "caret", "dplyr", "printr", "cluster", "ape", "RColorBrewer", "latticeExtra", "plotrix")
## install
ipak(packages)
ipak(packages[8])
installed.packages(lib.loc = "C:/R/win-library/3.2")[, "Package"]
pkg[!(pkg %in% installed.packages(lib.loc = "C:/R/win-library/3.2")[, "Package"])]
pkg <- packages
pkg[!(pkg %in% installed.packages(lib.loc = "C:/R/win-library/3.2")[, "Package"])]
new.pkg <- pkg[!(pkg %in% installed.packages(lib.loc = "C:/R/win-library/3.2")[, "Package"])]
install.packages(new.pkg, lib = "C:/R/win-library/3.2", dependencies = TRUE)
options
options()
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages(lib.loc = "C:/R/win-library/3.2")[, "Package"])]
if (length(new.pkg) > 0)
install.packages(new.pkg, lib = "C:/R/win-library/3.2", dependencies = TRUE)
}
## list of packages
packages <- c("aqp", "soilDB", "sharpshootR", "Rcmdr", "raster", "rms", "randomForest", "shape", "shapefiles", "sp", "spatial", "plyr", "lattice", "circular", "markdown", "httr", "rpart", "ggplot2", "rgdal", "knitr", "reshape2", "fBasics", "caret", "dplyr", "printr", "cluster", "ape", "RColorBrewer", "latticeExtra", "plotrix")
pkg <- packages
new.pkg <- pkg[!(pkg %in% installed.packages(lib.loc = "C:/R/win-library/3.2")[, "Package"])]
install.packages(new.pkg, lib = "C:/R/win-library/3.2", dependencies = TRUE)
dir.create(path="C:/workspace", recursive = T)
dir.create(path="C:/workspace/soil-pit/reports/genhz_rules", recursive = T)
dir.create(path="C:/workspace/soil-pit/reports/soilDB_x", recursive = T)
dir.create(path="C:/R/win-library/3.2", recursive = T)
# Download Rprofile
download.file("https://raw.githubusercontent.com/ncss-tech/soil-pit/master/sandbox/stephen/.Rprofile", "C:/workspace/.Rprofile", method = "libcurl")
# Download latest report and rules
download.file("https://raw.githubusercontent.com/ncss-tech/soil-pit/master/reports/pedon_summary_by_taxonname.Rmd", "C:/workspace/soil-pit/reports/pedon_summary_by_taxonname.Rmd", method = "libcurl")
download.file("https://raw.githubusercontent.com/ncss-tech/soil-pit/master/reports/lab_summary_by_taxonname.Rmd", "C:/workspace/soil-pit/reports/lab_summary_by_taxonname.Rmd", method = "libcurl")
download.file("https://raw.githubusercontent.com/ncss-tech/soil-pit/master/soilDB_x/utils.R", "C:/workspace/soil-pit/soilDB_x/utils.R", method = "libcurl")
download.file("https://raw.githubusercontent.com/ncss-tech/soil-pit/master/reports/genhz_rules/genhz_rules.zip", "C:/workspace/soil-pit/reports/genhz_rules/genhz_rules.zip", method = "libcurl")
download.file("https://raw.githubusercontent.com/ncss-tech/soil-pit/master/reports/mapunit_summary_by_shapefile.Rmd", "C:/workspace/soil-pit/reports/mapunit_summary_by_shapefile.Rmd", method = "libcurl")
download.file("https://raw.githubusercontent.com/ncss-tech/soil-pit/master/reports/mapunit_summary_by_mukey.Rmd", "C:/workspace/soil-pit/reports/mapunit_summary_by_mukey.Rmd", method = "libcurl")
# Install packages
packages <- c("aqp", "soilDB", "RODBC", "RCurl", "XML", "circular", "colorspace", "RColorBrewer", "plyr", "ggplot2", "reshape2", "knitr", "rmarkdown", "xtable", "lattice", "maps", "sp", "gdalUtils", "raster", "'rgdal"))
local({
r <- getOption("repos")
r["CRAN"] <- "http://cran.mirrors.hoobly.com/"
options(repos = r)
})
## Install and packages and dependencies
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages(lib.loc = "C:/R/win-library/3.2")[, "Package"])]
if (length(new.pkg) > 0)
install.packages(new.pkg, lib = "C:/R/win-library/3.2", dependencies = TRUE)
}
ipak(packages)
## Install and packages and dependencies
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages(lib.loc = "C:/R/win-library/3.2")[, "Package"])]
if (length(new.pkg) > 0)
install.packages(new.pkg, lib = "C:/R/win-library/3.2", dependencies = TRUE)
}
ipak(packages)
packages <- c("aqp", "soilDB", "RODBC", "RCurl", "XML", "circular", "colorspace", "RColorBrewer", "plyr", "ggplot2", "reshape2", "knitr", "rmarkdown", "xtable", "lattice", "maps", "sp", "gdalUtils", "raster", "'rgdal"))
packages <- c("aqp", "soilDB", "RODBC", "RCurl", "XML", "circular", "colorspace", "RColorBrewer", "plyr", "ggplot2", "reshape2", "knitr", "rmarkdown", "xtable", "lattice", "maps", "sp", "gdalUtils", "raster", "'rgdal")
local({
r <- getOption("repos")
r["CRAN"] <- "http://cran.mirrors.hoobly.com/"
options(repos = r)
})
## Install and packages and dependencies
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages(lib.loc = "C:/R/win-library/3.2")[, "Package"])]
if (length(new.pkg) > 0)
install.packages(new.pkg, lib = "C:/R/win-library/3.2", dependencies = TRUE)
}
ipak(packages)
dir.create(path="C:/workspace/soil-pit/soilDB_x", recursive = T)
download.file("https://raw.githubusercontent.com/ncss-tech/soil-pit/master/soilDB_x/utils.R", "C:/workspace/soil-pit/soilDB_x/utils.R", method = "libcurl")
.libPaths
.libPaths()
abbreviate(" Millsdale silty clay loam, New Castle Till Plain, 0 to 2 percent slopes", 20)
get_test_NASIS_db <- function() {
# must have RODBC installed
if(!requireNamespace('RODBC'))
stop('please install the `RODBC` package', call.=FALSE)
q <- "SELECT lmapunitiid, muacres
FROM lmapunit_View_1;"
# setup connection local NASIS
channel <- RODBC::odbcDriverConnect(connection="DSN=nasis_local;UID=NasisSqlRO;PWD=nasisRe@d0n1y")
# exec query
d <- RODBC::sqlQuery(channel, q, stringsAsFactors=FALSE)
# close connection
RODBC::odbcClose(channel)
# done
return(d)
}
test <- get_test_NASIS_db()
test
paste0(test$lmapunitiid, collapse = ", ")
paste0(test$lmapunitiid, collapse = "', '")
sum(test$muacres)
sum(test$muacres) * .2
c(178, 152, 140) - c(25, 36, 40)
200 - c(140, 152, 178)
200 - c(0, 10, 15)
127-51
127-152
c(152, 127, 98) - c(98, 127, 152)
c(152, 127, 98) - c(25, 36, 40)
200 - c(98, 127, 152)
c(76, 74, 40) - c(20, 33, 45)
getwd()*
getwd()
sand <- read.csv("sand_example.csv")
which(is.na(sand))
c(76, 83)
aggregate(sand ~ landuse, sand, mean)
aggregate(sand ~ landuse, sand, mean, round)
aggregate(sand ~ landuse, sand, function(x) round(mean(x)))
help(rnorm)
test <- rnorm(1000)
plot(density(test), main = "Normal Distribution: Mean = 0, Standard Deviation = 1")
test <- dnorm(1000)
plot(density(test), main = "Normal Distribution: Mean = 0, Standard Deviation = 1")
test
test <- pnorm(1000)
test
test <- dnorm(c(0, 0.25, 0.5, 0.75, 1)))
test <- dnorm(c(0, 0.25, 0.5, 0.75, 1))
plot(density(test), main = "Normal Distribution: Mean = 0, Standard Deviation = 1")
plot(density(-3:3), main = "Normal Distribution: Mean = 0, Standard Deviation = 1")
test <- qnorm(c(0, 0.25, 0.5, 0.75, 1))
plot(density(test), main = "Normal Distribution: Mean = 0, Standard Deviation = 1")
test <- rnorm(100000)
plot(density(test), main = "Normal Distribution: Mean = 0, Standard Deviation = 1")
test <- rnorm(1000000)
plot(density(test), main = "Normal Distribution: Mean = 0, Standard Deviation = 1")
plot(density(test), main = "Normal Distribution: Mean = 0, Standard Deviation = 1", lty = 2)
plot(density(test), main = "Normal Distribution: Mean = 0, Standard Deviation = 1", lty = 1)
plot(density(test), main = "Normal Distribution: Mean = 0, Standard Deviation = 1", lty = 3)
help(par)
help(lty)
??lty
plot(density(test), main = "Normal Distribution: Mean = 0, Standard Deviation = 1", lwd = 2)
plot(density(test), main = "Normal Distribution: Mean = 0, Standard Deviation = 1", lwd = 1.5)
test <- rnorm(10000000)
plot(density(test), main = "Normal Distribution: Mean = 0, Standard Deviation = 1", lwd = 1.5)
test <- rnorm(1000000)
plot(density(test), main = "Normal Distribution: Mean = 0, Standard Deviation = 1", lwd = 1.5)
test <- rbeta(1000000, shape1 = 2, shape2 = 1000)
plot(density(test))
test <- rlnorm(1000000)
plot(density(test))
test <- rbeta(1000000, shape1 = 2, shape2 = 1000)
plot(density(test))
plot(density(test), main = "Beta Distribution: Shape 1 = 2, Shape 2 = 1000")
hist(sand$sand)
hist(sand$sand, col = "grey")
d <- density(sand$sand)
plot(d)
hist(sand$sand, col = "grey")
plot(density(sand$sand))
d<-(density(sand$sand))
plot(d)
amean <-mean(sand$sand)
amed <-median(sand$sand)
abline(v=amed, col="green") #plot the median as a gree vertical line
abline(v=amean, col="red") #plot the mean as a red vertical line
d <-(density(sand$sand))
plot(d)
amean <- mean(sand$sand)
amed < -median(sand$sand)
abline(v = amed, col = "green") #plot the median as a gree vertical line
abline(v = amean, col = "red") #plot the mean as a red vertical line
d <-(density(sand$sand))
plot(d)
amean <- mean(sand$sand)
amed <- median(sand$sand)
abline(v = amed, col = "green") #plot the median as a gree vertical line
abline(v = amean, col = "red") #plot the mean as a red vertical line
d <-(density(sand$sand))
plot(d)
amean <- mean(sand$sand)
amed <- median(sand$sand)
abline(v = amed, col = "green") #plot the median as a gree vertical line
abline(v = amean, col = "red") #plot the mean as a red vertical line
help(quartile)
help(quantile)
library(knitr)
knit("C:/workspace/stats_for_soil_survey/trunk/chapters/4_exploratory_analysis/4_exploratory_analysis.Rmd", "C:/workspace/stats_for_soil_survey/trunk/chapters/4_exploratory_analysis/4_exploratory_analysis.md")
source('C:/workspace/geo-pit/trunk/R-geoprocessing/gdalUtilsFunctions.R', echo=TRUE)
gdal_GTiff2SAGA("M:/geodata/project_data/8VIC/sdat/ca794.tif", "C:/workspace/test2.sdat")
library(gdalUtils)
gdal_setInstallation(search_path = "C:/Program Files/QGIS/QGIS Wien/bin", rescan = TRUE)
gdal_GTiff2SAGA("M:/geodata/project_data/8VIC/sdat/ca794.tif", "C:/workspace/test2.sdat")
library(gdalUtils)
library(RSAGA)
gdal_setInstallation(search_path = "C:/Program Files/QGIS/QGIS Wien/bin", rescan = TRUE)
myenv <- rsaga.env(path = "C:/Program Files/QGIS Wien/apps/saga")
help("gdal_translate")
gdal_translate("M:/geodata/project_data/8VIC/sdat/ca794.tif", "M:/geodata/project_data/8VIC/sdat/ca794_new.tif", of = "GTiff")
gdal_translate("M:/geodata/project_data/8VIC/sdat/ca794.tif", "M:/geodata/project_data/8VIC/sdat/ca794_new.tif", of = "GTiff", verbose = TRUE)
gdal_translate("M:/geodata/project_data/8VIC/sdat/ca794_new.tif", "M:/geodata/project_data/8VIC/sdat/ca794_new.sdat", of = "SAGA", verbose = TRUE)
rsaga.geoprocessor("grid_gridding", 0, env = myenv, list(
INPUT = "C:/workspace/ca794.shp",
OUTPUT = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
FIELD = "mukey2",
OUTPUT = "2",
TARGET = "1",
GRID_GRID = "M:/geodata/project_data/8VIC/sdat/ned30m_8VIC.sgrd")
)
test <- raster("M:/geodata/project_data/8VIC/sdat/ned30m_8VIC.sdat")
library(raster)
test <- raster("M:/geodata/project_data/8VIC/sdat/ned30m_8VIC.sdat")
res(test)
rsaga.get.usage("grid_gridding", 0, env = myenv).
rsaga.get.usage("grid_gridding", 0, env = myenv)
test
extent(test)[1]
rsaga.geoprocessor("grid_gridding", 0, env = myenv, list(
INPUT = "C:/workspace/ca794.shp",
FIELD = "mukey2",
OUTPUT = "2",
TARGET = "1",
USER_GRID = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
USER_XMIN = extent(test)[1],
USER_XMAX = extent(test)[2],
USER_YMIN = extent(test)[3],
USER_YMAX = extent(test)[4],
USER_SIZE = paste(res(test), collapse = ";")
)
res(test)[1]
rsaga.geoprocessor("grid_gridding", 0, env = myenv, list(
INPUT = "C:/workspace/ca794.shp",
FIELD = "mukey2",
OUTPUT = "2",
TARGET = "1",
USER_GRID = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
USER_XMIN = extent(test)[1],
USER_XMAX = extent(test)[2],
USER_YMIN = extent(test)[3],
USER_YMAX = extent(test)[4],
USER_SIZE = res(test)[1]
)
extent(test)
extent(test)[2]
extent(test)[3]
extent(test)[]
extent(test)[4]
rsaga.geoprocessor("grid_gridding", 0, env = myenv, list(
INPUT = "C:/workspace/ca794.shp",
FIELD = "mukey2",
OUTPUT = "2",
TARGET = "0",
USER_GRID = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
USER_XMIN = extent(test)[1],
USER_XMAX = extent(test)[2],
USER_YMIN = extent(test)[3],
USER_YMAX = extent(test)[4],
USER_SIZE = res(test)[1]
)
rsaga.geoprocessor("statistics_grid", 5, env = myenv, list(
ZONES = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
STATLIST = paste(c("M:/geodata/project_data/8VIC/sdat/ned30m_8VIC.sgrd", "M:/geodata/project_data/8VIC/sdat/ned30m_8VIC_slope5.sgrd"), collapse = ";"),
OUTTAB = "C:/workspace/test.csv"
))
test <- read.csv("C:/workspace/test.csv")
str(test)
test
rsaga.get.usage("statistics_grid", 5, env = myenv)
rsaga.geoprocessor("statistics_grid", 5, env = myenv, list(
ZONES = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
STATLIST = paste(c("M:/geodata/project_data/8VIC/sdat/ned30m_8VIC_wetness.sgrd", "M:/geodata/project_data/8VIC/sdat/ned30m_8VIC_slope5.sgrd"), collapse = ";"),
OUTTAB = "C:/workspace/test.csv"
))
rsaga.get.usage("statistics_grid", 5, env = myenv)
test <- read.csv("C:/workspace/test.csv")
str(test)
rsaga.geoprocessor("statistics_grid", 5, env = myenv, list(
ZONES = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
STATLIST = paste(c("M:/geodata/project_data/8VIC/sdat/ned30m_8VIC_wetness.sgrd", "M:/geodata/project_data/8VIC/sdat/ned30m_8VIC_slope5.sdat"), collapse = ";"),
OUTTAB = "C:/workspace/test.csv"
))
rsaga.get.usage("grid_gridding", 0, env = myenv)
rsaga.geoprocessor("grid_gridding", 0, env = myenv, list(
INPUT = "C:/workspace/ca794.shp",
FIELD = "mukey2",
OUTPUT = "2",
TARGET = "0",
GRID_TYPE = "2",
USER_GRID = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
USER_XMIN = extent(test)[1],
USER_XMAX = extent(test)[2],
USER_YMIN = extent(test)[3],
USER_YMAX = extent(test)[4],
USER_SIZE = res(test)[1]
)
rsaga.geoprocessor("grid_gridding", 0, env = myenv, list(
INPUT = "C:/workspace/ca794.shp",
FIELD = "mukey2",
OUTPUT = "2",
TARGET = "0",
USER_GRID = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
USER_XMIN = extent(test)[1],
USER_XMAX = extent(test)[2],
USER_YMIN = extent(test)[3],
USER_YMAX = extent(test)[4],
USER_SIZE = res(test)[1]
)
rsaga.geoprocessor("grid_gridding", 0, env = myenv, list(
INPUT = "C:/workspace/ca794.shp",
FIELD = "mukey2",
OUTPUT = "2",
TARGET = "0",
USER_GRID = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
USER_XMIN = extent(test)[1],
USER_XMAX = extent(test)[2],
USER_YMIN = extent(test)[3],
USER_YMAX = extent(test)[4],
USER_SIZE = res(test)[1]
)
test
test <- raster("M:/geodata/project_data/8VIC/sdat/ned30m_8VIC.sdat")
rsaga.geoprocessor("grid_gridding", 0, env = myenv, list(
INPUT = "C:/workspace/ca794.shp",
FIELD = "mukey2",
OUTPUT = "2",
TARGET = "0",
GRID_TYPE = "2",
USER_GRID = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
USER_XMIN = extent(test)[1],
USER_XMAX = extent(test)[2],
USER_YMIN = extent(test)[3],
USER_YMAX = extent(test)[4],
USER_SIZE = res(test)[1]
)
rsaga.geoprocessor("statistics_grid", 5, env = myenv, list(
ZONES = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
STATLIST = paste(c("M:/geodata/project_data/8VIC/sdat/ned30m_8VIC_wetness.sgrd", "M:/geodata/project_data/8VIC/sdat/ned30m_8VIC_slope5.sgrd"), collapse = ";"),
OUTTAB = "C:/workspace/test.csv",
SHORTNAMES = 1
))
rsaga.geoprocessor("statistics_grid", 5, env = myenv, list(
ZONES = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
STATLIST = paste(c("M:/geodata/project_data/8VIC/sdat/ned30m_8VIC_wetness.sgrd", "M:/geodata/project_data/8VIC/sdat/ned30m_8VIC_slope5.sgrd"), collapse = ";"),
OUTTAB = "C:/workspace/test.csv"
)
test <- read.csv("C:/workspace/test.csv")
str(test)
rsaga.get.usage("statistics_grid", 5, env = myenv)
library(RSAGA)
myenv <- rsaga.env(path = "C:/Program Files/QGIS Wien/apps/saga")
rsaga.get.usage("statistics_grid", 5, env = myenv)
rsaga.geoprocessor("statistics_grid", 5, env = myenv, list(
ZONES = "M:/geodata/project_data/8VIC/sdat/ca794.sgrd",
STATLIST = "M:/geodata/project_data/8VIC/sdat/ned30m_8VIC_slope5.sgrd",
OUTTAB = "C:/workspace/test.csv"
)
test <- read.csv("C:/workspace/test.csv")
str(test)
)test
test
.libPaths
.libPaths()
setwd("C:/workspace/stats_for_soil_survey/trunk/chapters/4_exploratory_analysis")
library(knitr)
knit("4_exploratory_analysis.Rmd", "4_exploratory_analysis.md")
