Common Data Sources
========================================================
transition: none
width: 1024
height: 800
css: custom.css


Jay Skovlin, Dylan Beaudette, Stephen Roecker

<br><br><br><br><br><br><br><br><br><br>
<span style="color: white; font-size:65%;">This document is based on:<br>`aqp` (`r utils::packageDescription("aqp", field="Version")`), `soilDB` (`r utils::packageDescription("soilDB", field="Version")`), and `sharpshootR` (`r utils::packageDescription("sharpshootR", field="Version")`).</span>


```{r setup, echo=FALSE, results='hide', warning=FALSE}
library(knitr, quietly = TRUE)
library(printr, quietly = TRUE)
opts_chunk$set(message=FALSE, warning=FALSE, fig.align='center', dev='png', tidy=TRUE, tidy.opts=list(width.cutoff=100), cache=TRUE)
```

```{r packages-data-pre-processing, tidy=FALSE, echo=FALSE}
# load libraries
library(aqp)
library(soilDB)
library(sharpshootR)
library(lattice)
library(plyr)
library(Hmisc)
library(diagram)

# set options 
options(width=100, stringsAsFactors=FALSE)
```

R Packages for working with soil data
========================================================

What if you could extract, organize, and visualize data from NASIS and many other commonly used soil database sources with a couple of lines of code? 

![](static-figures/soilDB-demo.png)

Suite of R packages specific to Soil Survey work
========================================================

![alt text](static-figures/pinn-transect.png)

- soil data are complex, inherently visual
- reproducibility is increasingly important
- focus on the interesting questions, not boilerplate
- a common vocabulary for soil data analysis would be nice


aqp Package: Algorithms for Quantitative Pedology
========================================================
class: smaller

![alt text](static-figures/sketches.png)

- **special data structures:** avoids annoying book-keeping code
- **visualization:** soil profile sketches, transect diagrams, Munsell &#8594;&nbsp; RGB
- **re-sampling:** regular depth-slicing or EA spline (coming soon)
- **aggregation:** summary by depth-slice or arbitrary "slabs"
- **classification:** pair-wise dissimilarity of profiles
- **utility functions:** soil depth, missing data eval., simulation, ...


soilDB Package: Soil Database Interface
========================================================

![](static-figures/soilDB_figure.png)



sharpshootR Package: Prototypes / Specialized Stuff
========================================================
class: small-code
<span class="oneliner">profile sketches organized by taxonomy</span>

```{r sharpshootR-0, fig.width=12, fig.height=5, eval=TRUE, echo=FALSE}
# soils of interest
s.list <- c('hornitos', 'perkins', 'argonaut', 'inks', 'mokelumne', 'dunstone', 'auburn', 'pentz', 'pardee', 'peters', 'amador', 'laniger')

# fetch data from SoilWeb server and return as SoilProfileCollection
s <- fetchOSD(s.list)

# organize and plot according to subgroup level taxonomic data
SoilTaxonomyDendrogram(s, cex.taxon.labels=0.8)
```

soilReports Package: Generate unique reports
========================================================
- TODO: insert example graphics....MDS, density plots, etc.


Why R?
========================================================
 
- repeatable, self-documenting work:
 - 2800+ packages on CRAN: 100+ packages on GIS, ecology, and **soils**!
 - package system: algorithms + docs + sample data

- applies a scripting approach to repetitive analysis work 
 
- advanced data visualization capabilities
 - testing by eye: simple graphical "grammar" used to plot data
 - formalized testing: correlation, regression, classification, ordination, ...
 - I/O capabilities: file, URL, SOAP, SQL, ODBC, PDF, PNG, SHP, KML, ...
 - optimizers, matrix operations, custom data structures, ...






Examples
========================================================


soilDB: OSD Summaries
========================================================
class: small-code
<span class="oneliner">basic morphologic / taxonomic data from OSD and SC databases [<a href="http://casoilresource.lawr.ucdavis.edu/see/">SoilWeb</a>]</span>

```{r soilDB-OSD, fig.width=10, fig.height=5, eval=TRUE, tidy=FALSE}
# soils of interest
s.list <- c('hornitos', 'argonaut', 'mokelumne', 'dunstone', 'auburn', 'pentz', 'pardee', 'peters', 'amador', 'laniger')

# fetch data from SoilWeb server and return as SoilProfileCollection
s <- fetchOSD(s.list)

# plot
par(mar=c(0,0,0,0))
plot(s, name='hzname', id.style='side', cex.name=0.75, axis.line.offset=-4.5)
```


soilDB: Soil Series Extent
========================================================
class: small-code
<span class="oneliner">simplified series extent maps [<a href="http://casoilresource.lawr.ucdavis.edu/see/">SoilWeb</a>]</span>

```{r soilDB-series-extent, eval=FALSE}
amador <- seriesExtent("amador") # result is a SpatialPolygonsDataFrame
writeOGR(amador, driver='ESRI Shapefile', ...) # save to SHP
```

![alt text](static-figures/series-extent-example.png)



soilDB: KSSL Data
========================================================
class: small-code
<span class="oneliner">characterization and current taxonomic data [<a href="http://casoilresource.lawr.ucdavis.edu/see/">SoilWeb</a>]</span>

```{r soilDB-KSSL, eval=FALSE}
musick <- fetchKSSL('musick') # result is a SoilProfileCollection
```

![alt text](static-figures/kssl-slab-example.png)

soilDB: SCAN and SNOTEL climate data
========================================================
class: small-code
<span class="oneliner">plot time series of above and below ground sensors</span>

![alt text](static-figures/SCAN_data_time_series.jpeg)



sharpshootR: Soil Taxonomy Visualization
========================================================
class: small-code
<span class="oneliner">profile sketches organized by taxonomy</span>

```{r sharpshootR-1, fig.width=12, fig.height=5, eval=TRUE}
# soils of interest
s.list <- c('hornitos', 'perkins', 'argonaut', 'inks', 'mokelumne', 'dunstone', 'auburn', 'pentz', 'pardee', 'peters', 'amador', 'laniger')

# fetch data from SoilWeb server and return as SoilProfileCollection
s <- fetchOSD(s.list)

# organize and plot according to subgroup level taxonomic data
SoilTaxonomyDendrogram(s, cex.taxon.labels=0.8)
```



sharpshootR: Component Relationships
========================================================
<span class="oneliner">investigate the relationship between component data from SSURGO / NASIS</span>

```{r sharpshootR-comp-relationship-1, fig.width=15, fig.height=15, results='hide', echo=TRUE, eval=TRUE, tidy=FALSE}
# get data from SDA
q <- "SELECT component.mukey, comppct_r, lower(compname) as compname 
FROM legend 
INNER JOIN mapunit ON mapunit.lkey = legend.lkey 
LEFT OUTER JOIN component ON component.mukey = mapunit.mukey 
WHERE legend.areasymbol IN ('CA654') AND compkind IN ('Series', 'Taxadjunct')
ORDER BY mukey, comppct_r DESC"

# run query, process results, and return as data.frame object
res <- SDA_query(q)
```

```{r sharpshootR-comp-relationship-2, echo=TRUE, eval=FALSE, tidy=TRUE}
# compute adjacency matrix
m <- component.adj.matrix(res)
# plot component relationships as network diagram
par(mar=c(0,0,2,0)) 
plotSoilRelationGraph(m) 
title('CA654 Components')
```

<span class="link-to-details">&#8594;&nbsp;[SDA_query() manual page](http://aqp.r-forge.r-project.org/soilDB-html-manual/SDA_query.html)</span>
<br>
<span class="link-to-details">&#8594;&nbsp;[component.adj.matrix() manual page](http://aqp.r-forge.r-project.org/sharpshootR-html-manual/component.adj.matrix.html)</span>
<br>
<span class="link-to-details">&#8594;&nbsp;[plotSoilRelationGraph() manual page](http://aqp.r-forge.r-project.org/sharpshootR-html-manual/plotSoilRelationGraph.html)</span>


sharpshootR: Component Relationships
========================================================
title: none
```{r sharpshootR-comp-relationship-3, fig.width=15, fig.height=15, results='hide', echo=FALSE, eval=TRUE}
m <- component.adj.matrix(res)
par(mar=c(0,0,2,0)) ; plotSoilRelationGraph(m) ; title('CA654 Components')
```

sharpshootR: ESD Relationships
========================================================
<span class="oneliner">investigate the relationship between ESD and component data from SSURGO / NASIS</span>

![alt text](static-figures/ESD_relation_diagram.png)


sharpshootR: Component Relationships
========================================================
<span class="oneliner">generate hillslope position probability matrix by series name</span>

```{r sharpshootR-comp-relationship-4, eval=FALSE, echo=TRUE, results='hide'}
top.10 <- names(sort(table(res$compname), decreasing=TRUE)[1:10])
hp <- hillslope.probability(top.10)
```

```{r sharpshootR-comp-relationship-5, eval=FALSE, echo=FALSE}
print(hp)
```

Potential uses: 
- disaggregation clues
- stratification / weighting for sampling mission
- survey update work / ESD work


soilReports: Mapunit and MLRA comparisons
========================================================

- Reports that:
   + summarize component data for an MLRA project
   + summarize lab data from NASIS Lab Layer table
   + summarize mupolygon layer from a geodatabase
   + summarize field pedons from NASIS pedon table
   + compare MLRA using pre-made, raster sample databases


Convenience 'fetch' Functions in the SoilDB Package
========================================================

- **fetchNASIS(from='pedons')**
    - Gets NASIS pedon/horizon data from a local NASIS database.
    
- **fetchNASIS(from='components')**
    - Gets selected NASIS map unit and component daa from a local NASIS database.
      + [NASIS Component Data](http://ncss-tech.github.io/AQP/soilDB/NASIS-component-data.html)
    

Fetch lab data sources
========================================================

- **fetchNASISLabData()**
    - Gets KSSL laboratory pedon/horizon layer data from a local NASIS database.
- **fetchKSSL()**
    - Gets KSSL data from the SoilWeb system via BBOX, MLRA, or series name query.
        + [KSSL Data Demo](http://ncss-tech.github.io/AQP/soilDB/KSSL-demo.html)
        + [Water Retention Curve Development from KSSL Data](http://ncss-tech.github.io/AQP/soilDB/fetchKSSL-VG-demo.html)
- **fetchRaCA()**
    - Gets Rapid Carbon Assessment (RaCA) data by State, geographic bounding-box, RaCA site ID, or series query from the SoilWeb system.
        + [RaCA Data Demo](http://ncss-tech.github.io/AQP/soilDB/RaCA-demo.html)  
        
 
Fetch other soil data sources
========================================================       
- **SDA_query**
    - Submits queries to the Soil Data Access system.
        + [Soil Data Access Tutorial](http://ncss-tech.github.io/AQP/soilDB/SDA-tutorial.html)
        
- **fetchOSD()**
    - Fetches a limited subset of horizon- and site-level attributes for named soil series from the SoilWeb system.
    
- **fetchPedonPC()**
    - Fetches commonly used site and horizon data from a PedonPC v.5 database.
    
Fetch soil climate-related sources
======================================================== 

- **fetchSCAN()**
    - Queries soil and climate data from USDA-NRCS SCAN Stations.
      + [A Unified Interface to SCAN/SNOTEL Data](http://ncss-tech.github.io/AQP/soilDB/fetchSCAN-demo.html)
      
- **fetchHenry()**
    - Downloads data from the Henry Mount Soil Climate Database.
        + [Henry Mount Soil Climate Database Tutorial](http://ncss-tech.github.io/AQP/soilDB/Henry-demo.html)


Why do all of this?  
========================================================

```{r echo=FALSE, results='hide', fig.height=7, fig.width=9, dpi=120}
library(ggplot2)
# assemble data on number of pedon by decade
#Pedons <- c(577, 6152, 9517, 19058, 42587, 112182, 231609, 184913)
#Year <- c("<1950s", "1950s", "1960s", "1970s", "1980s", "1990s", "2000s", "2010s")
Year <- as.numeric(c("1940", "1941", "1942", 
"1943", "1944", "1945", "1946", "1947", "1948", "1949", "1950", 
"1951", "1952", "1953", "1954", "1955", "1956", "1957", "1958", 
"1959", "1960", "1961", "1962", "1963", "1964", "1965", "1966", 
"1967", "1968", "1969", "1970", "1971", "1972", "1973", "1974", 
"1975", "1976", "1977", "1978", "1979", "1980", "1981", "1982", 
"1983", "1984", "1985", "1986", "1987", "1988", "1989", "1990", 
"1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", 
"1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", 
"2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", 
"2015", "2016", "2017"))
Pedons <- c(21, 2, 18, 26, 54, 48, 2, 23, 39, 71, 96, 116, 80, 
448, 692, 906, 992, 1107, 1168, 1367, 1249, 1461, 1384, 957, 
1176, 1107, 1101, 1011, 1076, 1362, 1866, 1586, 1646, 1444, 1953, 
2322, 2773, 3089, 3525, 3691, 3409, 3449, 3552, 3471, 4402, 4881, 
3691, 5124, 5334, 9658, 11554, 8485, 10120, 11694, 11038, 10869, 
12618, 12747, 12392, 13855, 14117, 18200, 15991, 15096, 23997, 
20265, 25705, 33700, 37313, 37368, 42288, 59900, 35772, 19062, 
26009, 12776, 11497, 11168)
Cummulative_Pedons <- c(310, 312, 330, 356, 
410, 458, 460, 483, 522, 593, 689, 805, 885, 1333, 2025, 2931, 
3923, 5030, 6198, 7565, 8814, 10275, 11659, 12616, 13792, 14899, 
16000, 17011, 18087, 19449, 21315, 22901, 24547, 25991, 27944, 
30266, 33039, 36128, 39653, 43344, 46753, 50202, 53754, 57225, 
61627, 66508, 70199, 75323, 80657, 90315, 101869, 110354, 120474, 
132168, 143206, 154075, 166693, 179440, 191832, 205687, 219804, 
238004, 253995, 269091, 293088, 313353, 339058, 372758, 410071, 
447439, 489727, 549627, 585399, 604461, 630470, 643246, 654743, 
665911)
 
# cat("# pedons = ", formatC(sum(Pedons), big.mark = ",", format = "fg"), "\n", "# lab pedons = ~64,000", sep = "")

# plot number of pedons in NASIS 
ggplot(data.frame(Pedons, Year), aes(x=Year, y=Pedons)) + geom_bar(stat="identity") + scale_y_continuous(name="Pedons", labels = scales::comma)
``` 

Cummulative trend
========================================================
```{r pedons_a1, echo=FALSE, results='hide',fig.height=7, fig.width=9, dpi=120}
# plot the cummulative number of pedons in NASIS 
ggplot(data.frame(Cummulative_Pedons, Year), aes(x=Year, y=Cummulative_Pedons)) + geom_bar(stat="identity") + scale_y_continuous(name="Cummulative Pedons", labels = scales::comma)
``` 

Importance of Pedon Data
========================================================

- We've got a lot of data to work with and likely much more to bring online
- Archiving quality observations of soils made in the past, present, and future is difficult work
and we will need many different tools to help us tackle simple to complex analysis tasks
- QC of pedon data is worth spending some time on!

Common Issues with Pedon Data
========================================================
- Digging and making observations of soil is difficult!
- Errors in location data
- Our confidence in the observations often weakens with the depth of material described.
- How might we address this?
  + Use a cutoff depth, for example 100 cm, can be used to truncate observations to a zone of greater confidence.
  + Show the relative confidence of the data with depth.

SoilDB Package - How does it work and what does it do?
========================================================
- extracts data from a NASIS selected set via Structured Query Language (SQL)
- Runs basic data checks as the data are loaded
- data are assembled into a custom site-level and horizon-level data structure object within R called a `Soil Profile Collection (SPC)`.
- The [`SoilProfileCollection`](http://ncss-tech.github.io/AQP/aqp/aqp-intro.html) class simplifies the process of working with collections of data associated with soil profiles, e.g., site-level data, horizon-level data, spatial data, diagnostic horizon data, metadata, etc. 


Distillation of the NASIS Site/Pedon data structure into an SPC
========================================================

```{r structure_diagram_a, echo=FALSE, results='hide', fig.height=7, fig.width=9, dpi=120}
library(diagram, quietly=TRUE)
# reset figure margins
par(mar = c(1, 1, 1, 1))

# simple diagram of the pedon data structure
names <- c("Site", "Siteobs", "Pedon", "Horizon")
M <- matrix(nrow = 4, ncol = 4, byrow = TRUE, data = 0)
M[4, 3] <- M[3, 2] <- M[2, 1] <- ""
pos <- cbind (c(1, 1, 1, 1))
plotmat(M, pos = pos, name = names, lwd = 1, box.lwd = 2, cex.txt = 0.8, box.size = 0.1, box.type = "square", box.prop = 0.4, mx=-0.2)

# parallel simplified SPC structure
names <- c("Site-level", "Horizon-level")
M <- matrix(nrow = 2, ncol = 2, byrow = TRUE, data = 0)
 M[2, 1] <- ""
#pos <- cbind (c(2, 2))
plotmat(M, pos = c(1, 1), name = names, lwd = 1, box.lwd = 2, cex.txt = 0.8, box.size = 0.14, box.type = "square", box.prop = 0.75, mx=0.3, my=-0.1, add=TRUE)

# add arrows to the diagram
arrows(0.42, 0.1, x1=0.65, y1=0.1, length = 0.25, code=2, lwd=2, angle = 15)
arrows(0.42, 0.35, x1=0.65, y1=0.54, length = 0.25, code=2, lwd=2, angle = 15)
arrows(0.42, 0.61, x1=0.65, y1=0.61, length = 0.25, code=2, lwd=2, angle = 15)
arrows(0.42, 0.87, x1=0.65, y1=0.68, length = 0.25, code=2, lwd=2, angle = 15)
```

SoilProfileCollection objects
========================================================

```{r SPC-1, echo=FALSE}
# sample dataset, extracted from NASIS
library(soilDB)
data(loafercreek)
str(loafercreek, 2)
```

```{r SPC-2, fig.width=10, fig.height=4, echo=FALSE}
par(mar=c(0,0,0,0))
plot(loafercreek[1:10, ], name='hzname', print.id=FALSE, cex.names=0.8, axis.line.offset=-4, max.depth=150)
```

Limitations
========================================================
- `fetchNASIS()` is not comprehensive
- The SPC does not contain all of the data for every table related to site/pedon data in NASIS
- Queries the most commonly used pedon and horizon data.  
- The nested complexity of the NASIS data structure is simplified and flattened in the resulting SPC object.  
    + Higher level functions like `fetchNASIS()` bundle a series of lower level functions that get specific parts of the data structure. 

- Data that is not automatically brought into the SPC can often be loaded using the 'get_extended_data from_NASIS_db' function and then joined back to the SPC data.

Data Checks Run by the fetchNASIS() Function
========================================================

- **Inconsistent horizon boundaries**. Pedons with inconsistent horizon boundaries are not loaded.  
    + the commonly occurs when a bottom depth of a horizon does not match the next upper depth of the horizon below it.

```{r example_a, echo=FALSE, results='show', warning=FALSE}
top <- c(0,38,56,121,135)
bot <- c(30,56,121,135,'')
hzname <- c('A', 'Bt1', 'Bt2', 'Bk', 'R')
d <- data.frame(hzname, top, bot)
d
```
Note the issue above. The bottom depth of the A horizon and the upper depth of the Bt1 horizon should be the same: either 30 or 38 cm.

========================================================

- **Missing lower horizon depths.** Offending horizons are fixed by replacing the missing bottom depth with the top depth plus 2 cm. In the case of the profile shown above, a bottom depth of 137 cm would be inserted where the depth is missing.

```{r example_a1, echo=FALSE, results='show', warning=FALSE}
top <- c(0,38,56,121,135)
bot <- c(30,56,121,135,137)
hzname <- c('A', 'Bt1', 'Bt2', 'Bk', 'R')
d <- data.frame(hzname, top, bot)
d
```

- **Presence of multiple map datums**. Results reported to the user and the data are not modified.

- **Sites missing pedon records**. Data without corresponding horizons are not loaded.



<!-- 
linking to sections of and Rmd / HTML:
# linking to section names, see last comment
https://stackoverflow.com/questions/33913780/internal-links-in-rmarkdown-dont-work
# hard-coded links, LATEX style
https://github.com/STAT545-UBC/Discussion/issues/138
-->

Your Objectives...for this afternoon!
========================================================

- [Learn how to inspect objects and data types](http://ncss-tech.github.io/stats_for_soil_survey/chapters/2_data/2a_tabular_data.html#data-types-and-classes)
- [Use the soilDB package to load NASIS pedon data into R](http://ncss-tech.github.io/stats_for_soil_survey/chapters/2_data/2a_tabular_data.html#spc-object-your-turn)
- [Determine if your data passes the checks run by `fetchNASIS()`](http://ncss-tech.github.io/stats_for_soil_survey/chapters/2_data/2a_tabular_data.html#fetchNASIS-pedon-data-checks)
- [Identify pedon data with potential errors](http://ncss-tech.github.io/stats_for_soil_survey/chapters/2_data/2a_tabular_data.html#fetchNASIS-data-checks-your-turn) 
- [Understand the structure of data stored in a `SoilProfileCollection`](http://ncss-tech.github.io/stats_for_soil_survey/chapters/2_data/2a_tabular_data.html#spc-object-structure)
- [Plot your pedon locations](http://ncss-tech.github.io/stats_for_soil_survey/chapters/2_data/2a_tabular_data.html#pedon-locations)
- [Review additional data that is accessible via extended data functions](http://ncss-tech.github.io/stats_for_soil_survey/chapters/2_data/2a_tabular_data.html#nasis-pedon-extended-data)
- Use the examples in the chapter material to develop a plot or figure from your data


Your Objectives...for tomorrow!
========================================================
- [Test out ways to filter and subset SPC data in R](http://ncss-tech.github.io/stats_for_soil_survey/chapters/2_data/2a_tabular_data.html#NASIS-spc-object-examples)
- [Learn how functions can be used to bundle operations](http://ncss-tech.github.io/stats_for_soil_survey/chapters/2_data/2a_tabular_data.html#writing-functions)
- Try the [`SoilProfileCollection` Object Tutorial](http://ncss-tech.github.io/AQP/aqp/aqp-intro.html)
- Try plotting [groups of related pedon data](http://ncss-tech.github.io/AQP/aqp/merged-legend-plot.html)
- Try more examples with your own data

